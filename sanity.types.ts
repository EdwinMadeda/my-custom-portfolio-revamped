/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type MetaKeyword = {
  _id: string;
  _type: "metaKeyword";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  keywordName?: string;
  keywordSlug?: Slug;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  feedback?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "blockquote";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  position?: {
    positionTitle?:
      | "Software Engineer"
      | "Frontend Developer"
      | "Backend Developer"
      | "Full Stack Developer"
      | "DevOps Engineer"
      | "Site Reliability Engineer"
      | "Mobile Developer"
      | "QA Engineer"
      | "Machine Learning Engineer"
      | "Data Engineer"
      | "Cloud Architect"
      | "UX Designer"
      | "UI Designer"
      | "Product Designer"
      | "Graphic Designer"
      | "Design Lead"
      | "Product Manager"
      | "Product Owner"
      | "Marketing Director"
      | "Growth Marketer"
      | "Content Strategist"
      | "CTO"
      | "CEO"
      | "Co-founder"
      | "Engineering Manager"
      | "Tech Lead"
      | "Lead Developer"
      | "Director of Engineering"
      | "Head of Design"
      | "Open Source Contributor"
      | "Freelancer"
      | "Consultant"
      | "Instructor"
      | "Mentor"
      | "Volunteer"
      | "Advocate"
      | "Other";
    customPositionTitle?: string;
    affiliation?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "affiliation";
    };
  };
  photo?: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  isPinned?: boolean;
  category?: "mostPopular" | "clientsFavorite" | "topRated" | "other";
};

export type Affiliation = {
  _id: string;
  _type: "affiliation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  type?:
    | "company"
    | "nonprofit"
    | "community"
    | "openSource"
    | "government"
    | "freelance"
    | "personalBrand"
    | "other";
  link?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  location?: string;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  serviceIcon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  serviceName?: string;
  shortDescription?: string;
  longDescription?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h2" | "h3" | "h4";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          blank?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
  >;
};

export type OtherWork = {
  _id: string;
  _type: "otherWork";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  technologiesUsed?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "technologyOrTool";
  }>;
  contributionLink?: string;
  detailedDescription?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h2";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
  >;
  date?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  technologiesUsed?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "technologyOrTool";
  }>;
  liveDemoLink?: string;
  repoLink?: string;
  detailedDescription?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h2";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
  >;
  developmentStatus?:
    | "concept"
    | "inProgress"
    | "completed"
    | "onHold"
    | "archived";
  date?: string;
  projectPreviewImages?: {
    desktopView?: Array<{
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      primaryDisplay?: boolean;
      screenshotViewItem?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "screenshotViewItemDesc";
      };
      variant?: "standard" | "ultraWide";
      _key: string;
    }>;
    tabletView?: Array<{
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      primaryDisplay?: boolean;
      screenshotViewItem?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "screenshotViewItemDesc";
      };
      variant?: "standard";
      _key: string;
    }>;
    mobileView?: Array<{
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      primaryDisplay?: boolean;
      screenshotViewItem?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "screenshotViewItemDesc";
      };
      variant?: "standard";
      _key: string;
    }>;
  };
};

export type ScreenshotViewItemDesc = {
  _id: string;
  _type: "screenshotViewItemDesc";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  value?: Slug;
};

export type TechnologyOrTool = {
  _id: string;
  _type: "technologyOrTool";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  techName?: string;
  techDescription?: string;
  techLogo?: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  proficiencyLevel?: "Beginner" | "Intermediate" | "Advanced" | "Expert";
  websiteUrl?: string;
  techCategory?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "techCategory";
  };
};

export type TechCategory = {
  _id: string;
  _type: "techCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  categoryName?: string;
  categorySlug?: Slug;
  categoryDescription?: string;
};

export type Profile = {
  _id: string;
  _type: "profile";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  profileName?: string;
  slug?: Slug;
  brandingImage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "brandingImage";
  };
  hero?: {
    greeting?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    tagline?: string;
    subHeadline?: string;
    ctaButtonText?: string;
    ctaButtonLink?:
      | "#home"
      | "#about-me"
      | "#skills"
      | "#works"
      | "#testimonials"
      | "#contact";
  };
  about?: {
    shortIntro?: string;
    longIntro?: string;
    personalStory?: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "normal" | "h2" | "h3" | "h4" | "blockquote";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            blank?: boolean;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          caption?: string;
          _type: "image";
          _key: string;
        }
    >;
  };
  technologiesAndTools?: {
    shortIntro?: string;
    longIntro?: string;
    featuredTechnologiesAndTools?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "technologyOrTool";
    }>;
  };
  works?: {
    shortIntro?: string;
    longIntro?: string;
    featuredProjects?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "project";
    }>;
    otherWorks?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "otherWork";
    }>;
  };
  services?: {
    shortIntro?: string;
    longIntro?: string;
    featuredServices?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "service";
    }>;
  };
  testimonials?: {
    shortIntro?: string;
    longIntro?: string;
    featuredTestimonials?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "testimonial";
    }>;
  };
  contact?: {
    email?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "contactEmail";
    };
    phoneNumber?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "phoneNumber";
    };
    socialMediaLinks?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "socialMediaLinks";
    };
  };
  resume?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "resume";
  };
  metadata?: {
    metaTitle?: string;
    metaDescription?: string;
    metaKeywords?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "metaKeyword";
    }>;
    metaImage?:
      | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "metaImage";
        }
      | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "brandingImage";
        };
    metaURL?: string;
    metaType?: "website" | "profile" | "portfolio";
  };
};

export type MetaImage = {
  _id: string;
  _type: "metaImage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText?: string;
};

export type Resume = {
  _id: string;
  _type: "resume";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pdfFile?: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type SocialMediaLinks = {
  _id: string;
  _type: "socialMediaLinks";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  links?: Array<{
    platform?:
      | "linkedin"
      | "github"
      | "twitter"
      | "instagram"
      | "youtube"
      | "behance"
      | "dribbble"
      | "medium"
      | "pinterest"
      | "upwork"
      | "fiverr"
      | "angelist"
      | "stackoverflow"
      | "gitlab"
      | "reddit"
      | "discord"
      | "twitch"
      | "tiktok"
      | "vimeo";
    link?: string;
    _key: string;
  }>;
};

export type PhoneNumber = {
  _id: string;
  _type: "phoneNumber";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  numberDetails?: {
    dialCode?:
      | "+93"
      | "+358"
      | "+355"
      | "+213"
      | "+1"
      | "+376"
      | "+244"
      | "+1"
      | "+1"
      | "+54"
      | "+374"
      | "+297"
      | "+61"
      | "+43"
      | "+994"
      | "+1"
      | "+973"
      | "+880"
      | "+1"
      | "+375"
      | "+32"
      | "+501"
      | "+229"
      | "+1"
      | "+975"
      | "+591"
      | "+599"
      | "+387"
      | "+267"
      | "+55"
      | "+246"
      | "+673"
      | "+359"
      | "+226"
      | "+257"
      | "+855"
      | "+237"
      | "+1"
      | "+238"
      | "+1"
      | "+236"
      | "+235"
      | "+56"
      | "+61"
      | "+61"
      | "+57"
      | "+269"
      | "+682"
      | "+506"
      | "+225"
      | "+385"
      | "+53"
      | "+599"
      | "+357"
      | "+420"
      | "+243"
      | "+45"
      | "+253"
      | "+1"
      | "+1"
      | "+593"
      | "+20"
      | "+503"
      | "+240"
      | "+291"
      | "+372"
      | "+268"
      | "+251"
      | "+500"
      | "+298"
      | "+679"
      | "+358"
      | "+33"
      | "+594"
      | "+689"
      | "+241"
      | "+995"
      | "+49"
      | "+233"
      | "+350"
      | "+30"
      | "+299"
      | "+1"
      | "+590"
      | "+1"
      | "+502"
      | "+44"
      | "+224"
      | "+245"
      | "+592"
      | "+509"
      | "+39"
      | "+504"
      | "+852"
      | "+36"
      | "+354"
      | "+91"
      | "+62"
      | "+964"
      | "+353"
      | "+98"
      | "+44"
      | "+972"
      | "+39"
      | "+1"
      | "+81"
      | "+44"
      | "+962"
      | "+7"
      | "+254"
      | "+686"
      | "+383"
      | "+965"
      | "+996"
      | "+856"
      | "+371"
      | "+961"
      | "+266"
      | "+231"
      | "+218"
      | "+423"
      | "+370"
      | "+352"
      | "+853"
      | "+261"
      | "+265"
      | "+60"
      | "+960"
      | "+223"
      | "+356"
      | "+692"
      | "+596"
      | "+222"
      | "+230"
      | "+262"
      | "+52"
      | "+691"
      | "+373"
      | "+377"
      | "+976"
      | "+382"
      | "+1"
      | "+212"
      | "+258"
      | "+95"
      | "+264"
      | "+674"
      | "+977"
      | "+31"
      | "+687"
      | "+64"
      | "+505"
      | "+227"
      | "+234"
      | "+683"
      | "+672"
      | "+850"
      | "+1"
      | "+47"
      | "+968"
      | "+92"
      | "+680"
      | "+507"
      | "+675"
      | "+595"
      | "+86"
      | "+51"
      | "+63"
      | "+48"
      | "+351"
      | "+1"
      | "+974"
      | "+242"
      | "+220"
      | "+262"
      | "+40"
      | "+7"
      | "+250"
      | "+590"
      | "+290"
      | "+1"
      | "+1"
      | "+590"
      | "+508"
      | "+1"
      | "+685"
      | "+378"
      | "+239"
      | "+966"
      | "+221"
      | "+381"
      | "+248"
      | "+232"
      | "+65"
      | "+1"
      | "+421"
      | "+386"
      | "+677"
      | "+252"
      | "+27"
      | "+82"
      | "+211"
      | "+34"
      | "+94"
      | "+970"
      | "+249"
      | "+597"
      | "+47"
      | "+46"
      | "+41"
      | "+963"
      | "+886"
      | "+992"
      | "+66"
      | "+389"
      | "+670"
      | "+228"
      | "+690"
      | "+676"
      | "+1"
      | "+216"
      | "+90"
      | "+993"
      | "+1"
      | "+688"
      | "+256"
      | "+380"
      | "+971"
      | "+44"
      | "+255"
      | "+1"
      | "+598"
      | "+998"
      | "+678"
      | "+58"
      | "+84"
      | "+1"
      | "+1"
      | "+681"
      | "+212"
      | "+967"
      | "+260"
      | "+263";
    phoneNumberValue?: string;
  };
};

export type ContactEmail = {
  _id: string;
  _type: "contactEmail";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  address?: string;
};

export type BrandingImage = {
  _id: string;
  _type: "brandingImage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | MetaKeyword
  | Testimonial
  | Affiliation
  | Service
  | OtherWork
  | Project
  | ScreenshotViewItemDesc
  | TechnologyOrTool
  | TechCategory
  | Profile
  | MetaImage
  | Resume
  | SocialMediaLinks
  | PhoneNumber
  | ContactEmail
  | BrandingImage
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: PROFILE_QUERY
// Query: *[_type == "profile" && slug.current == $slug][0]{      hero {    greeting,    tagline,    subHeadline,    ctaButtonText,    ctaButtonLink  },      about {    shortIntro,    longIntro,    personalStory  },      technologiesAndTools {    shortIntro,    longIntro,    featuredTechnologiesAndTools[]->{      _id,      techName,      techDescription,      proficiencyLevel,      techLogo {        asset->{          _id,          url,          metadata {            blurHash,            lqip,            dimensions          }        }      },      websiteUrl,      techCategory->{         _id,        categoryName,        categoryDescription,        "categorySlug": categorySlug.current      }    }  },      works {    shortIntro,    longIntro,    "featuredProjects": featuredProjects[]->{      _id,      title,      description,      "slug": slug.current,      thumbnail {        asset->{          _id,          url,          metadata {            blurHash,            lqip,            dimensions          }        }      }    },    "otherWorks": otherWorks[]->{      _id,      title,      "slug": slug.current,      description,      thumbnail {        asset->{          _id,          url,          metadata {            blurHash,            lqip,            dimensions          }        }      }    }  },      services {    shortIntro,    longIntro,    featuredServices[]->{       _id,      serviceIcon{        asset->{          _id,          url,          metadata {            blurHash,            lqip,            dimensions          }        }      },      serviceName,      shortDescription,      longDescription    }  },      testimonials {    shortIntro,    longIntro,    featuredTestimonials[]->{       _id,      name,      feedback,      position{        "title": select(           positionTitle == "Other" => customPositionTitle,          positionTitle        ),        affiliation->{          _id,          name,          type,          link,          logo{            asset->{              _id,              url,              metadata {                blurHash,                lqip,                dimensions              }            }          },          description,          location        }      },      photo {        asset->{          _id,          url,          metadata {            blurHash,            lqip,            dimensions          }        }      },      isPinned,      category    }  },      contact {    email->{      title,      "value": address     },    phoneNumber->{      title,      "value": numberDetails.dialCode + numberDetails.phoneNumberValue     },    "socialMedia": socialMediaLinks->{      title,      links[]{        platform,        link      }    }  },      metadata {    metaTitle,    metaDescription,    metaKeywords[]->{      _id,      keywordName,     "keywordSlug" : keywordSlug.current    },    metaImage->{       "asset": image.asset->{        _id,        url,        metadata {          blurHash,          lqip,          dimensions        }      },      altText     },    metaURL,    metaType  },  }
export type PROFILE_QUERYResult = {
  hero: {
    greeting: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    tagline: string | null;
    subHeadline: string | null;
    ctaButtonText: string | null;
    ctaButtonLink:
      | "#about-me"
      | "#contact"
      | "#home"
      | "#skills"
      | "#testimonials"
      | "#works"
      | null;
  } | null;
  about: {
    shortIntro: string | null;
    longIntro: string | null;
    personalStory: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h2" | "h3" | "h4" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            blank?: boolean;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          caption?: string;
          _type: "image";
          _key: string;
        }
    > | null;
  } | null;
  technologiesAndTools: {
    shortIntro: string | null;
    longIntro: string | null;
    featuredTechnologiesAndTools: Array<{
      _id: string;
      techName: string | null;
      techDescription: string | null;
      proficiencyLevel:
        | "Advanced"
        | "Beginner"
        | "Expert"
        | "Intermediate"
        | null;
      techLogo: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        };
      } | null;
      websiteUrl: string | null;
      techCategory: {
        _id: string;
        categoryName: string | null;
        categoryDescription: string | null;
        categorySlug: string | null;
      } | null;
    }> | null;
  } | null;
  works: {
    shortIntro: string | null;
    longIntro: string | null;
    featuredProjects: Array<{
      _id: string;
      title: string | null;
      description: string | null;
      slug: string | null;
      thumbnail: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      } | null;
    }> | null;
    otherWorks: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
      description: string | null;
      thumbnail: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | null;
  services: {
    shortIntro: string | null;
    longIntro: string | null;
    featuredServices: Array<{
      _id: string;
      serviceIcon: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      } | null;
      serviceName: string | null;
      shortDescription: string | null;
      longDescription: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "h2" | "h3" | "h4" | "normal";
            listItem?: "bullet" | "number";
            markDefs?: Array<{
              href?: string;
              blank?: boolean;
              _type: "link";
              _key: string;
            }>;
            level?: number;
            _type: "block";
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
            _key: string;
          }
      > | null;
    }> | null;
  } | null;
  testimonials: {
    shortIntro: string | null;
    longIntro: string | null;
    featuredTestimonials: Array<{
      _id: string;
      name: string | null;
      feedback: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          blank?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
      position: {
        title:
          | string
          | null
          | "Advocate"
          | "Backend Developer"
          | "CEO"
          | "Cloud Architect"
          | "Co-founder"
          | "Consultant"
          | "Content Strategist"
          | "CTO"
          | "Data Engineer"
          | "Design Lead"
          | "DevOps Engineer"
          | "Director of Engineering"
          | "Engineering Manager"
          | "Freelancer"
          | "Frontend Developer"
          | "Full Stack Developer"
          | "Graphic Designer"
          | "Growth Marketer"
          | "Head of Design"
          | "Instructor"
          | "Lead Developer"
          | "Machine Learning Engineer"
          | "Marketing Director"
          | "Mentor"
          | "Mobile Developer"
          | "Open Source Contributor"
          | "Other"
          | "Product Designer"
          | "Product Manager"
          | "Product Owner"
          | "QA Engineer"
          | "Site Reliability Engineer"
          | "Software Engineer"
          | "Tech Lead"
          | "UI Designer"
          | "UX Designer"
          | "Volunteer";
        affiliation: {
          _id: string;
          name: string | null;
          type:
            | "community"
            | "company"
            | "freelance"
            | "government"
            | "nonprofit"
            | "openSource"
            | "other"
            | "personalBrand"
            | null;
          link: string | null;
          logo: {
            asset: {
              _id: string;
              url: string | null;
              metadata: {
                blurHash: string | null;
                lqip: string | null;
                dimensions: SanityImageDimensions | null;
              } | null;
            } | null;
          } | null;
          description: string | null;
          location: string | null;
        } | null;
      } | null;
      photo: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        };
      } | null;
      isPinned: boolean | null;
      category: "clientsFavorite" | "mostPopular" | "other" | "topRated" | null;
    }> | null;
  } | null;
  contact: {
    email: {
      title: string | null;
      value: string | null;
    } | null;
    phoneNumber: {
      title: string | null;
      value: string | null;
    } | null;
    socialMedia: {
      title: string | null;
      links: Array<{
        platform:
          | "angelist"
          | "behance"
          | "discord"
          | "dribbble"
          | "fiverr"
          | "github"
          | "gitlab"
          | "instagram"
          | "linkedin"
          | "medium"
          | "pinterest"
          | "reddit"
          | "stackoverflow"
          | "tiktok"
          | "twitch"
          | "twitter"
          | "upwork"
          | "vimeo"
          | "youtube"
          | null;
        link: string | null;
      }> | null;
    } | null;
  } | null;
  metadata: {
    metaTitle: string | null;
    metaDescription: string | null;
    metaKeywords: Array<{
      _id: string;
      keywordName: string | null;
      keywordSlug: string | null;
    }> | null;
    metaImage: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          blurHash: string | null;
          lqip: string | null;
          dimensions: SanityImageDimensions | null;
        } | null;
      } | null;
      altText: string | null;
    } | null;
    metaURL: string | null;
    metaType: "portfolio" | "profile" | "website" | null;
  } | null;
} | null;
// Variable: SINGLE_PROJECT_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{    _id,    title,    description,    "slug": slug.current,    technologiesUsed[]->{      _id,      techName,      techDescription,      proficiencyLevel,      websiteUrl,      techCategory->{        _id,        categoryName,        categoryDescription,        "categorySlug": categorySlug.current      }    },    projectPreviewImages {      mobileView[] {        image {          asset->{            _id,            url,            metadata {              blurHash,              lqip,              dimensions            }          }        },        primaryDisplay,        variant,        screenshotViewItem->{          _id,          title,          "slug": value.current        }      },      tabletView[] {        image {          asset->{            _id,            url,            metadata {              blurHash,              lqip,              dimensions            }          }        },        primaryDisplay,        variant,        screenshotViewItem->{          _id,          title,          "slug": value.current        }      },      desktopView[] {        image {          asset->{            _id,            url,            metadata {              blurHash,              lqip,              dimensions            }          }        },        primaryDisplay,        variant,        screenshotViewItem->{          _id,          title,          "slug": value.current        }      }    },    liveDemoLink,    repoLink,    detailedDescription,    developmentStatus,    date  }
export type SINGLE_PROJECT_QUERYResult = {
  _id: string;
  title: string | null;
  description: string | null;
  slug: string | null;
  technologiesUsed: Array<{
    _id: string;
    techName: string | null;
    techDescription: string | null;
    proficiencyLevel:
      | "Advanced"
      | "Beginner"
      | "Expert"
      | "Intermediate"
      | null;
    websiteUrl: string | null;
    techCategory: {
      _id: string;
      categoryName: string | null;
      categoryDescription: string | null;
      categorySlug: string | null;
    } | null;
  }> | null;
  projectPreviewImages: {
    mobileView: Array<{
      image: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      } | null;
      primaryDisplay: boolean | null;
      variant: "standard" | null;
      screenshotViewItem: {
        _id: string;
        title: string | null;
        slug: string | null;
      } | null;
    }> | null;
    tabletView: Array<{
      image: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      } | null;
      primaryDisplay: boolean | null;
      variant: "standard" | null;
      screenshotViewItem: {
        _id: string;
        title: string | null;
        slug: string | null;
      } | null;
    }> | null;
    desktopView: Array<{
      image: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            blurHash: string | null;
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      } | null;
      primaryDisplay: boolean | null;
      variant: "standard" | "ultraWide" | null;
      screenshotViewItem: {
        _id: string;
        title: string | null;
        slug: string | null;
      } | null;
    }> | null;
  } | null;
  liveDemoLink: string | null;
  repoLink: string | null;
  detailedDescription: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "h2" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
  > | null;
  developmentStatus:
    | "archived"
    | "completed"
    | "concept"
    | "inProgress"
    | "onHold"
    | null;
  date: string | null;
} | null;
// Variable: PROFILE_SLUGS
// Query: *[_type == "profile"]{    "slug": slug.current  }
export type PROFILE_SLUGSResult = Array<{
  slug: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "profile" && slug.current == $slug][0]{\n    \n  hero {\n    greeting,\n    tagline,\n    subHeadline,\n    ctaButtonText,\n    ctaButtonLink\n  }\n,\n    \n  about {\n    shortIntro,\n    longIntro,\n    personalStory\n  }\n,\n    \n  technologiesAndTools {\n    shortIntro,\n    longIntro,\n    featuredTechnologiesAndTools[]->{\n      _id,\n      techName,\n      techDescription,\n      proficiencyLevel,\n      techLogo {\n        asset->{\n          _id,\n          url,\n          metadata {\n            blurHash,\n            lqip,\n            dimensions\n          }\n        }\n      },\n      websiteUrl,\n      techCategory->{ \n        _id,\n        categoryName,\n        categoryDescription,\n        "categorySlug": categorySlug.current\n      }\n    }\n  }\n,\n    \n  works {\n    shortIntro,\n    longIntro,\n    "featuredProjects": featuredProjects[]->{\n      _id,\n      title,\n      description,\n      "slug": slug.current,\n      thumbnail {\n        asset->{\n          _id,\n          url,\n          metadata {\n            blurHash,\n            lqip,\n            dimensions\n          }\n        }\n      }\n    },\n    "otherWorks": otherWorks[]->{\n      _id,\n      title,\n      "slug": slug.current,\n      description,\n      thumbnail {\n        asset->{\n          _id,\n          url,\n          metadata {\n            blurHash,\n            lqip,\n            dimensions\n          }\n        }\n      }\n    }\n  }\n,\n    \n  services {\n    shortIntro,\n    longIntro,\n    featuredServices[]->{ \n      _id,\n      serviceIcon{\n        asset->{\n          _id,\n          url,\n          metadata {\n            blurHash,\n            lqip,\n            dimensions\n          }\n        }\n      },\n      serviceName,\n      shortDescription,\n      longDescription\n    }\n  }\n,\n    \n  testimonials {\n    shortIntro,\n    longIntro,\n    featuredTestimonials[]->{ \n      _id,\n      name,\n      feedback,\n      position{\n        "title": select( \n          positionTitle == "Other" => customPositionTitle,\n          positionTitle\n        ),\n        affiliation->{\n          _id,\n          name,\n          type,\n          link,\n          logo{\n            asset->{\n              _id,\n              url,\n              metadata {\n                blurHash,\n                lqip,\n                dimensions\n              }\n            }\n          },\n          description,\n          location\n        }\n      },\n      photo {\n        asset->{\n          _id,\n          url,\n          metadata {\n            blurHash,\n            lqip,\n            dimensions\n          }\n        }\n      },\n      isPinned,\n      category\n    }\n  }\n,\n    \n  contact {\n    email->{\n      title,\n      "value": address \n    },\n    phoneNumber->{\n      title,\n      "value": numberDetails.dialCode + numberDetails.phoneNumberValue \n    },\n    "socialMedia": socialMediaLinks->{\n      title,\n      links[]{\n        platform,\n        link\n      }\n    }\n  }\n,\n    \n  metadata {\n    metaTitle,\n    metaDescription,\n    metaKeywords[]->{\n      _id,\n      keywordName,\n     "keywordSlug" : keywordSlug.current\n    },\n    metaImage->{ \n      "asset": image.asset->{\n        _id,\n        url,\n        metadata {\n          blurHash,\n          lqip,\n          dimensions\n        }\n      },\n      altText \n    },\n    metaURL,\n    metaType\n  }\n,\n  }': PROFILE_QUERYResult;
    '*[_type == "project" && slug.current == $slug][0]{\n    _id,\n    title,\n    description,\n    "slug": slug.current,\n    technologiesUsed[]->{\n      _id,\n      techName,\n      techDescription,\n      proficiencyLevel,\n      websiteUrl,\n      techCategory->{\n        _id,\n        categoryName,\n        categoryDescription,\n        "categorySlug": categorySlug.current\n      }\n    },\n    projectPreviewImages {\n      mobileView[] {\n        image {\n          asset->{\n            _id,\n            url,\n            metadata {\n              blurHash,\n              lqip,\n              dimensions\n            }\n          }\n        },\n        primaryDisplay,\n        variant,\n        screenshotViewItem->{\n          _id,\n          title,\n          "slug": value.current\n        }\n      },\n      tabletView[] {\n        image {\n          asset->{\n            _id,\n            url,\n            metadata {\n              blurHash,\n              lqip,\n              dimensions\n            }\n          }\n        },\n        primaryDisplay,\n        variant,\n        screenshotViewItem->{\n          _id,\n          title,\n          "slug": value.current\n        }\n      },\n      desktopView[] {\n        image {\n          asset->{\n            _id,\n            url,\n            metadata {\n              blurHash,\n              lqip,\n              dimensions\n            }\n          }\n        },\n        primaryDisplay,\n        variant,\n        screenshotViewItem->{\n          _id,\n          title,\n          "slug": value.current\n        }\n      }\n    },\n    liveDemoLink,\n    repoLink,\n    detailedDescription,\n    developmentStatus,\n    date\n  }': SINGLE_PROJECT_QUERYResult;
    ' *[_type == "profile"]{\n    "slug": slug.current\n  }': PROFILE_SLUGSResult;
  }
}
